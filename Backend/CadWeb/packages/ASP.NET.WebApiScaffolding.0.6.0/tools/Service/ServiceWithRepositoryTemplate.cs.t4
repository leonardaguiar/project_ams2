<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using <#= Model.RepositoryNamespace #>;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.ServiceNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>

namespace <#= Model.ServiceNamespace #>
{ 
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var modelVariablePlural = modelNamePlural.ToLower(); 
	var modelRepositoryType = modelName + "Repository";
	var modelRepositoryVariable = modelVariable + "Repository";
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
#>
    public interface I<#= modelName #>Service: IDisposable
    {
        Task<IEnumerable<<#= modelName #>>> Get<#= modelNamePlural #>();
        Task<<#= modelName #>> Get<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id);
        Task<<#= modelName #>> Update<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id, <#= modelName #> <#= modelVariable #>);
        Task<<#= modelName #>> Create<#= modelName #>(<#= modelName #> <#= modelVariable #>);
        Task<<#= modelName #>> CreateOrUpdate<#= modelName #>(<#= modelName #> <#= modelVariable #>);
        Task<<#= modelName #>> Delete<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id);
    }

    public class <#= modelName #>Service : I<#= modelName #>Service
    {
		private readonly I<#= modelRepositoryType #> <#= modelRepositoryVariable #>;

		/* If you are using Dependency Injection, you can delete the following constructor */
        public <#= modelName #>Service() : this(new <#= modelRepositoryType #>()) 
        {
        }

        public <#= modelName #>Service(<#= modelRepositoryType #> <#= modelRepositoryVariable #>)
        {
			this.<#= modelRepositoryVariable #> = <#= modelRepositoryVariable #>;
        }

        public async Task<IEnumerable<<#= modelName #>>> Get<#= modelNamePlural #>()
        {
			return await <#= modelRepositoryVariable #>.Get<#= modelNamePlural #>();
        }

        public async Task<<#= modelName #>> Get<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id)
        {
			return await <#= modelRepositoryVariable #>.Get<#= modelName #>(id);
        }

        public async Task<<#= modelName #>> Update<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id, <#= modelName #> <#= modelVariable #>)
        {
			return await <#= modelRepositoryVariable #>.Update<#= modelName #>(id, <#= modelVariable #>);
        }

        public async Task<<#= modelName #>> Create<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
			return await <#= modelRepositoryVariable #>.Create<#= modelName #>(<#= modelVariable #>);
        }

        public async Task<<#= modelName #>> CreateOrUpdate<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            if (<#= modelVariable #>.<#= Model.PrimaryKey #> == default(<#= primaryKeyProperty.Type.AsString #>)) {
				// New entity
				<#= modelVariable #> = await this.Create<#= modelName #>(<#= modelVariable #>);
            } else {
                // Existing entity
				<#= modelVariable #> = await this.Update<#= modelName #>(<#= modelVariable #>.<#= Model.PrimaryKey #>, <#= modelVariable #>);
            }

			return <#= modelVariable #>;
        }

        public async Task<<#= modelName #>> Delete<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id)
        {
			return await <#= modelRepositoryVariable #>.Delete<#= modelName #>(id);
        }

        public void Dispose() 
        {
            <#= modelRepositoryVariable #>.Dispose();
        }
    }
}
