<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>

namespace <#= Model.RepositoryNamespace #>
{ 
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var modelVariablePlural = modelNamePlural.ToLower(); 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
#>
    public interface I<#= modelName #>Repository: IDisposable
    {
        Task<IEnumerable<<#= modelName #>>> Get<#= modelNamePlural #>();
        Task<<#= modelName #>> Get<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id);
        Task<<#= modelName #>> Update<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id, <#= modelName #> <#= modelVariable #>);
        Task<<#= modelName #>> Create<#= modelName #>(<#= modelName #> <#= modelVariable #>);
        Task<<#= modelName #>> Delete<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id);
    }

    public class <#= modelName #>Repository : I<#= modelName #>Repository
    {
		private <#= contextName #> context;

		/* If you are using Dependency Injection, you can delete the following constructor */
        public <#= modelName #>Repository(): this(new <#= contextName #>())
        {
        }

        public <#= modelName #>Repository(<#= contextName #> context)
        {
			this.context = context;
        }
		
        private IQueryable<<#= modelName #>> All()
        {
            return context.<#= modelNamePlural #>;
        }

        private IQueryable<<#= modelName #>> AllIncluding(params Expression<Func<<#= modelName #>, object>>[] includeProperties)
        {
            IQueryable<<#= modelName #>> query = context.<#= modelNamePlural #>;
            foreach (var includeProperty in includeProperties) {
                query = query.Include(includeProperty);
            }
            return query;
        }

        private async Task<<#= modelName #>> Find(<#= primaryKeyProperty.Type.AsString #> id) {
<# if(isObjectContext) { #>
            return await context.<#= modelNamePlural #>.SingleOrDefaultAsync(x => x.<#= Model.PrimaryKey #> == id);
<# } else { #>
            return await context.<#= modelNamePlural #>.FirstOrDefaultAsync(x => x.<#= Model.PrimaryKey #> == id);
<# } #>
		}

        public async Task<IEnumerable<<#= modelName #>>> Get<#= modelNamePlural #>()
        {
<#
	var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
	var includeExpression = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
	if (string.IsNullOrEmpty(includeExpression)) { #>
			return await this.All().ToListAsync();
<#	} else { #>
			// return await this.All().ToListAsync();
			return await this.AllIncluding(<#= includeExpression #>).ToListAsync();
<#  } #>
        }

        public async Task<<#= modelName #>> Get<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id)
        {
			return await this.Find(id);	
        }

        public async Task<<#= modelName #>> Update<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id, <#= modelName #> <#= modelVariable #>)
        {
<# if(isObjectContext) { #>
			context.<#= modelNamePlural #>.Attach(<#= modelVariable #>);
            context.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
            context.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>

            await context.SaveChangesAsync();
			return <#= modelVariable #>;
        }

        public async Task<<#= modelName #>> Create<#= modelName #>(<#= modelName #> <#= modelVariable #>)
        {
            // New entity
            if (<#= modelVariable #>.<#= Model.PrimaryKey #> == default(<#= primaryKeyProperty.Type.AsString #>)) {
<# if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
                <#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                context.<#= modelNamePlural #>.AddObject(<#= modelVariable #>);
<# } else { #>
                context.<#= modelNamePlural #>.Add(<#= modelVariable #>);
<# } #>
            }

            await context.SaveChangesAsync();
			return <#= modelVariable #>;
        }

        public async Task<<#= modelName #>> Delete<#= modelName #>(<#= primaryKeyProperty.Type.AsString #> id)
        {
<# if(isObjectContext) { #>
            var <#= modelVariable #> = await context.<#= modelNamePlural #>.SingleAsync(x => x.<#= Model.PrimaryKey #> == id);
            context.<#= modelNamePlural #>.DeleteObject(<#= modelName.ToLower() #>);
<# } else { #>
            var <#= modelVariable #> = await context.<#= modelNamePlural #>.FindAsync(id);
            context.<#= modelNamePlural #>.Remove(<#= modelName.ToLower() #>);
<# } #>
			await context.SaveChangesAsync();

			return <#= modelVariable #>;
        }

        public void Dispose() 
        {
            context.Dispose();
        }
    }
}
